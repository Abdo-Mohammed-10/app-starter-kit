# -*- coding: utf-8 -*-
"""Nano Banana Hackathon

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11XeYeGGuV11YqmVWuboDqwBK2gVivb3O
"""


import io
import mimetypes
from PIL import Image
from google import genai
from google.genai import types

from google import genai

client = genai.Client(api_key='Gemini_API')

model = "gemini-2.5-flash-image-preview"
model_text = "gemini-2.5-flash"

def save_binary_file(file_name , data) :
  with open(file_name,"wb") as f :
    f.write(data)
  print(f"File saved to : {file_name}")

def generate_story_scenes(story_prompt, num_scenes: int):
    full_prompt = (
        f"Break this story into {num_scenes} short scenes. "
        "For each scene, provide a short description and storytelling suitable for generating creative images familiar with the scenes.\n\n"
        f"Story: {story_prompt}"
    )

    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=[full_prompt]
    )
    return response.text

story_prompt = "In a quiet town where nothing unusual ever happens, a mysterious object appears in the middle of the main square overnight. It glows faintly and seems to react to the emotions of those who approach it. One morning, the town wakes up to find that a few people have vanished, leaving only cryptic messages behind. You are either one of the missing, someone trying to uncover the truth, or a witness to the strange events."
num_scenes = 3

generate_story_scenes(story_prompt, num_scenes)

from google.colab import userdata
userdata.get('Gemini_API')

gemini_api_key = userdata.get('Gemini_API')

def generate_story_scenes(story_prompt, num_scenes: int):
    prompt = (
        f"Break this story into {num_scenes} short scenes.\n"
        "For each scene, provide:\n"
        "1. title\n"
        "2. a short description\n"
        "3. storytelling suitable for generating creative images\n\n"
        f"Story: {story_prompt}"
    )

    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=[prompt]
    )

    return response.text

story_prompt = "In a quiet town where nothing unusual ever happens, a mysterious object appears in the middle of the main square overnight. It glows faintly and seems to react to the emotions of those who approach it. One morning, the town wakes up to find that a few people have vanished, leaving only cryptic messages behind."
num_scenes = 3

scenes = generate_story_scenes(story_prompt, num_scenes)
print(scenes)

def parse_story_scenes(text: str):
    scenes = []
    raw_scenes = [s.strip() for s in text.split("### Scene") if s.strip()]

    for raw_scene in raw_scenes:
        lines = [line.strip() for line in raw_scene.split("\n") if line.strip()]
        if not lines:
            continue

        first_line = lines[0]
        if ":" in first_line:
            _, title = first_line.split(":", 1)
            title = title.strip()
        else:
            title = first_line.strip()

        description = ""
        storytelling = ""
        capture_story = False

        for line in lines[1:]:
            if line.startswith("**Description:**"):
                description = line.replace("**Description:**", "").strip()
            elif line.startswith("**Storytelling for Creative Images:**"):
                storytelling = line.replace("**Storytelling for Creative Images:**", "").strip()
                capture_story = True
            elif capture_story:
                storytelling += " " + line

        storytelling = storytelling.replace("---", "").strip()

        if title or description or storytelling:
            scenes.append({
                "title": title or "Untitled Scene",
                "description": description,
                "storytelling": storytelling,
            })

    return scenes

parse_story_output = parse_story_scenes(scenes)
parse_story_output

import base64
import mimetypes
import os
from google.genai import types


def save_binary_file(file_name, data):
    with open(file_name, "wb") as f:
        f.write(data)
    print(f"File saved to: {file_name}")


def generate_scene_images(scenes):
    client = genai.Client(api_key=gemini_api_key)
    model = "gemini-2.5-flash-image-preview"

    for idx, scene in enumerate(scenes, 1):
        print(f"\n=== {scene['title']} ===\n")
        print(scene['storytelling'], "\n")

        contents = [
            types.Content(
                role="user",
                parts=[types.Part.from_text(text=scene['storytelling'])],  # Using storytelling for prompt
            )
        ]

        generate_content_config = types.GenerateContentConfig(
            response_modalities=["IMAGE", "TEXT"]
        )

        file_index = 0
        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents,
            config=generate_content_config,
        ):
            if (
                chunk.candidates is None
                or chunk.candidates[0].content is None
                or chunk.candidates[0].content.parts is None
            ):
                continue

            part = chunk.candidates[0].content.parts[0]

            if part.inline_data and part.inline_data.data:
                file_extension = mimetypes.guess_extension(part.inline_data.mime_type) or ".png"
                file_name = f"scene_{idx}_{file_index}{file_extension}"
                file_index += 1
                save_binary_file(file_name, part.inline_data.data)
            else:
                print(chunk.text)


if __name__ == "__main__":
    scenes = [
        {'title': 'The Silent Arrival',
  'description': 'The quiet town of Oakhaven wakes to discover a mysterious, softly glowing object in the center of its main square.',
  'storytelling': "A pre-dawn hush blankets Oakhaven. Cobblestone square, usually empty save for the statue of the town's founder, now dominates an obsidian-smooth, ovular monolith. It pulses with an inner, soft lavender glow, casting long, ethereal shadows across familiar shopfronts – the bakery, the old clockmaker, the general store. A lone baker, apron dusted with flour, is the first to stop, eyes wide, a bag of fresh rolls forgotten in his grip. Soon, sleepy townsfolk emerge from their homes, wrapped in shawls, pointing, whispering, their breath misting in the cool morning air. The object itself is seamless, alien, yet radiates an almost comforting hum that vibrates through the ground. Curiosity, confusion, and a hint of wonder bloom on their faces as they cautiously approach, a collective gasp rippling through the growing crowd."},
 {'title': 'The Emotional Echo',
  'description': 'Over several days, the townspeople interact with the object, discovering it reacts to their emotions with changing colors and intensity.',
  'storytelling': "Days pass, and the town square transforms into a constant hub of activity. Children, wide-eyed with fascination, giggle near the monolith's base, and its glow deepens to a soft, inviting rose. An elderly woman, recalling a lost love, approaches with a tearful sigh, and the object shimmers with a wistful, pale blue. When a skeptic, red-faced with anger, shouts at it, the glow intensifies to a pulsing, fiery orange, making everyone instinctively recoil. Close-ups reveal the changing expressions of the townsfolk: a young woman's jaw dropping in awe as it turns brilliant gold at her moment of pure joy, a grizzled farmer's fascinated stare reflected in its shifting, liquid surface. The monolith cycles through a kaleidoscope of colors—crimson for rage, emerald for envy, a serene white for peace—each a direct mirror of the collective or individual emotions directed towards it. A palpable, almost electric field surrounds it, a silent conversation between object and humanity."},
 {'title': 'The Empty Spaces',
  'description': 'One morning, several townspeople are discovered missing, leaving behind cryptic messages, and panic begins to spread.',
  'storytelling': 'A chilling dawn breaks over Oakhaven. The square is eerily quiet, the mysterious object still glowing, but now with a steady, unreadable white light, devoid of its previous emotional spectrum. Houses on Elm Street stand with doors ajar, breakfast half-eaten on tables, a child\'s discarded toy lying in the path of a cold sunbeam. The town crier, usually booming, now whispers in a terrified huddle with the mayor, his face ashen. Close-up on a crumpled note, left on a bedside table in one of the empty homes, bearing a single, intricate, unknown symbol and the words: "Beyond the veil, the song calls." Another note, tacked to the door of the vanished baker\'s shop, reads simply: "Follow the light." The remaining townspeople gather, not around the monolith, but in distraught groups, their faces etched with profound fear and unanswered questions, eyes darting anxiously between the empty homes, the cryptic messages, and the silent, ever-present object in the square. A growing sense of dread hangs heavy in the air, a cold contrast to the object\'s once-inviting glow.'}]

    generate_scene_images(scenes)

import matplotlib.pyplot as plt
from PIL import Image

def show_scene_images_table(scenes):
    n = len(scenes)
    fig, axes = plt.subplots(nrows=n, ncols=2, figsize=(15, 5*n))

    if n == 1:
        axes = [axes]

    for i, scene in enumerate(scenes):
        img_path = f"scene_{i+1}_0.png"
        try:
            img = Image.open(img_path)
            axes[i][0].imshow(img)
        except FileNotFoundError:
            axes[i][0].text(0.5, 0.5, "Image not found", ha='center', va='center', fontsize=12)
        axes[i][0].axis('off')

        axes[i][1].text(0, 1, scene['storytelling'], fontsize=12, va='top', wrap=True)
        axes[i][1].axis('off')
    plt.tight_layout()
    plt.show()

show_scene_images_table(scenes)


import io
import mimetypes
from PIL import Image
from google.genai import types

client = genai.Client(api_key='Gemini_API')

model = "gemini-2.5-flash-image-preview"
model_text = "gemini-2.5-flash"

def save_binary_file(file_name , data) :
  with open(file_name,"wb") as f :
    f.write(data)
  print(f"File saved to : {file_name}")

def generate_story_scenes(story_prompt, num_scenes: int):
    full_prompt = (
        f"Break this story into {num_scenes} short scenes. "
        "For each scene, provide a short description and storytelling suitable for generating creative images familiar with the scenes.\n\n"
        f"Story: {story_prompt}"
    )

    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=[full_prompt]
    )
    return response.text
    
# streamlit_app.py
import streamlit as st
from PIL import Image
import os

st.set_page_config(page_title="Story to Images", layout="wide")

st.title("✨ Story to Image Generator")
st.write("Enter a story, split it into scenes, and generate creative images for each scene using Gemini AI.")

# -----------------------------
# User Inputs
# -----------------------------
story_input = st.text_area("Enter your story here:", height=200)
num_scenes = st.number_input("Number of scenes:", min_value=1, max_value=20, value=3, step=1)

if st.button("Generate Scenes & Images"):
    if not story_input.strip():
        st.error("Please enter a story first!")
    else:
        with st.spinner("Generating story scenes..."):
            # Generate & parse scenes
            scene_text = generate_story_scenes(story_input, num_scenes)
            scenes = parse_story_scenes(scene_text)

        st.success(f"Generated {len(scenes)} scenes!")

        # Generate Images
        with st.spinner("Generating images for each scene..."):
            generate_scene_images(scenes)

        st.success("Images generated successfully!")

        # Display scenes & images
        for i, scene in enumerate(scenes, start=1):
            st.subheader(f"Scene {i}: {scene['title']}")
            st.write(scene['storytelling'])

            img_path = f"scene_{i}_0.png"
            if os.path.exists(img_path):
                img = Image.open(img_path)
                st.image(img, use_column_width=True)
            else:
                st.warning("Image not found for this scene.")
